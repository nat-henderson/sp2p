/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package simplepeer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.*;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.RegexFileFilter;
import org.apache.commons.codec.digest.DigestUtils;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.json.simple.*;

/**
 *
 * @author Jason
 */
public class MainWindow extends javax.swing.JFrame {

    static private final String newline = "\n";
    static Map<String, File>fileMap;
    JFileChooser chooser;
    ExecutorService pool;
    FileServer server;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        pool = Executors.newFixedThreadPool(100);
        fileMap = readFile();
        //server = new FileServer();
        //server.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        SearchText = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        ChooseFilesButton = new javax.swing.JButton();
        ConnectButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        toolsMenu = new javax.swing.JMenu();
        optionsButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "File Size", "Hash", "IP", "Port"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(resultsTable);
        resultsTable.getColumnModel().getColumn(0).setResizable(false);
        resultsTable.getColumnModel().getColumn(1).setResizable(false);
        resultsTable.getColumnModel().getColumn(2).setMinWidth(0);
        resultsTable.getColumnModel().getColumn(2).setPreferredWidth(0);
        resultsTable.getColumnModel().getColumn(2).setMaxWidth(0);
        resultsTable.getColumnModel().getColumn(3).setMinWidth(0);
        resultsTable.getColumnModel().getColumn(3).setPreferredWidth(0);
        resultsTable.getColumnModel().getColumn(3).setMaxWidth(0);
        resultsTable.getColumnModel().getColumn(4).setMinWidth(0);
        resultsTable.getColumnModel().getColumn(4).setPreferredWidth(0);
        resultsTable.getColumnModel().getColumn(4).setMaxWidth(0);

        SearchText.setText("Enter Search Terms");
        SearchText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchTextFocusGained(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        ChooseFilesButton.setText("Choose Files");
        ChooseFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFilesButtonActionPerformed(evt);
            }
        });

        ConnectButton.setText("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        fileMenu.setText("File");
        jMenuBar1.add(fileMenu);

        toolsMenu.setText("Tools");

        optionsButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        optionsButton.setText("Options");
        toolsMenu.add(optionsButton);

        jMenuBar1.add(toolsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchButton)
                .addGap(97, 97, 97))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ChooseFilesButton)
                        .addGap(205, 205, 205)
                        .addComponent(ConnectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(downloadButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChooseFilesButton)
                    .addComponent(ConnectButton)
                    .addComponent(downloadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFilesButtonActionPerformed
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose some folders!");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try{
                fileMap = hashDirectoryFiles(chooser.getSelectedFile());
            }
            catch(NoSuchAlgorithmException | IOException ex){
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
          }
        else {
            System.out.println("No Selection ");
        }
        writeFileMap();
    }//GEN-LAST:event_ChooseFilesButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
//        for (File f : fileMap.keySet()){
//            System.out.println(f.getName() + " " + fileMap.get(f));
//        }
        try {
                String[] searchResults = HttpRequestUtility.sendHttpRequest("http://kilvin.case.edu/search/"+SearchText.getText(), "GET", null);
                for (String s : searchResults){
                    JSONObject js = (JSONObject)JSONValue.parse(s);
                    ((DefaultTableModel)resultsTable.getModel()).addRow(new Object[]{js.get("filename"), js.get("size"), js.get("hash"), js.get("ip"), js.get("port")});
                }
                
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void SearchTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchTextFocusGained
        // TODO add your handling code here:
        SearchText.setText("");
    }//GEN-LAST:event_SearchTextFocusGained

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        String connect = JOptionPane.showInputDialog("Input Server Name");
        System.out.println(connect);
        Map<String, String> params;
        params = new HashMap<>();
        String username = JOptionPane.showInputDialog("Enter Username");
        String password = JOptionPane.showInputDialog("Enter Password");
        params.put("username", username);
        params.put("password", password);
        params.put("secret", "correcthorsebatterystaple");
        params.put("openport", "1234");
        try {
            String[] postResponse = HttpRequestUtility.sendHttpRequest("http://kilvin.case.edu/signin", "POST", params);
            for (String s : postResponse)
                if ("True".equals(s))
                    System.out.println("Logged in successfully.");
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for (String s : fileMap.keySet()){
          params.clear();
          params.put("username", username);
          params.put("filename", fileMap.get(s).getName());
          params.put("hash", s);
          params.put("filesize", String.valueOf(fileMap.get(s).length()));
          System.out.println(s);
          try {
            String[] ret = HttpRequestUtility.sendHttpRequest("http://kilvin.case.edu/register", "POST", params);
            for (String str : ret)
                if ("True".equals(str))
                    System.out.println("File"+ params.get("filename") +"Registered");
          } catch (Exception ex) {
              Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        //Code to get selected items from table
        int [] rowIndices = resultsTable.getSelectedRows();
        List<String[]> selectedRows = new ArrayList<>();
        for (int i : rowIndices){
            String[] rowData = new String[5];
            rowData[0] = (String)resultsTable.getValueAt(0, i);
            rowData[1] = (String)resultsTable.getValueAt(1, i);
            rowData[2] = (String)resultsTable.getValueAt(2, i);
            rowData[3] = (String)resultsTable.getValueAt(3, i);
            rowData[4] = (String)resultsTable.getValueAt(4, i);
            selectedRows.add(rowData);
        }
        
        //Queue the downloads to the ExecutorService
        for (String[] s : selectedRows){
            pool.submit(new FileDownloader(s[0], s[1], s[2], s[3], s[4]));
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseFilesButton;
    private javax.swing.JButton ConnectButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchText;
    private javax.swing.JButton downloadButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem optionsButton;
    private javax.swing.JTable resultsTable;
    private javax.swing.JMenu toolsMenu;
    // End of variables declaration//GEN-END:variables
    
    private Map<String, File> hashDirectoryFiles(File dir) throws NoSuchAlgorithmException, FileNotFoundException, IOException{
        Collection<File> files = FileUtils.listFiles(
            dir, 
            new RegexFileFilter("^(.*?)"), 
            DirectoryFileFilter.DIRECTORY
        );
        Map<String, File> createMap;
        createMap = new HashMap<>();
        for (File f : files){
            MessageDigest md = MessageDigest.getInstance("MD5");
            FileInputStream is;
            is = new FileInputStream(f);
            createMap.put(DigestUtils.md5Hex(is), f);
            is.close();
        }
        return createMap;
    }

    private Map<String, File> readFile() {
        Map<String, File> inMap = new HashMap<>();
        try {
            FileReader fr = new FileReader("filemap.txt");
            BufferedReader br = new BufferedReader(fr);
            String nextLine;
            while (null != (nextLine = br.readLine())){
                if (!"".equals(nextLine)){
                    String[] line = nextLine.split("~!~");
                    inMap.put(line[1], new File(line[0]));
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return inMap;
    }

    private void writeFileMap() {
        try {
            FileWriter fstream = new FileWriter("filemap.txt");
            BufferedWriter out = new BufferedWriter(fstream);
            for (String s : fileMap.keySet()){
                out.write(s+"~!~"+fileMap.get(s).getPath()+"\n");
            }
            out.close();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}
